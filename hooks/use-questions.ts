"use client"

import { useApp } from "@/lib/app-context"
import type { Question } from "@/lib/types"

const mockQuestions: Question[] = [
  {
    id: "1",
    projectId: "1",
    question: "What is our company vacation policy?",
    answer:
      "Our company offers 15 days of paid vacation per year for full-time employees, with additional days earned based on tenure. Vacation requests should be submitted at least 2 weeks in advance through the HR portal.",
    sources: [
      {
        documentId: "doc1",
        documentName: "Employee Handbook.pdf",
        pageNumber: 12,
        excerpt: "Full-time employees are entitled to 15 days of paid vacation annually...",
        relevanceScore: 0.95,
      },
    ],
    confidence: 0.92,
    timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago
    helpful: true,
  },
  {
    id: "2",
    projectId: "1",
    question: "How do I submit an expense report?",
    answer:
      "Expense reports can be submitted through the finance portal. You need to attach receipts for all expenses over $25 and get manager approval for expenses over $500.",
    sources: [
      {
        documentId: "doc2",
        documentName: "Finance Procedures.pdf",
        pageNumber: 5,
        excerpt: "All expense reports must include receipts for purchases exceeding $25...",
        relevanceScore: 0.88,
      },
    ],
    confidence: 0.85,
    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
  },
]

export function useQuestions() {
  const { state, dispatch } = useApp()

  const loadQuestions = async (projectId: string) => {
    dispatch({ type: "SET_LOADING", payload: true })
    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 800))
      const projectQuestions = mockQuestions.filter((q) => q.projectId === projectId)
      dispatch({ type: "SET_QUESTIONS", payload: projectQuestions })
    } catch (error) {
      dispatch({ type: "SET_ERROR", payload: "Failed to load questions" })
    } finally {
      dispatch({ type: "SET_LOADING", payload: false })
    }
  }

  const askQuestion = async (projectId: string, question: string) => {
    dispatch({ type: "SET_LOADING", payload: true })
    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000))

      const newQuestion: Question = {
        id: Date.now().toString(),
        projectId,
        question,
        answer:
          "This is a simulated answer. In a real implementation, this would be generated by your RAG system based on the uploaded documents.",
        sources: [
          {
            documentId: "mock-doc",
            documentName: "Sample Document.pdf",
            pageNumber: 1,
            excerpt: "This is a mock excerpt from the document that relates to your question...",
            relevanceScore: 0.75,
          },
        ],
        confidence: 0.78,
        timestamp: new Date(),
      }

      dispatch({ type: "ADD_QUESTION", payload: newQuestion })
      return newQuestion
    } catch (error) {
      dispatch({ type: "SET_ERROR", payload: "Failed to ask question" })
      throw error
    } finally {
      dispatch({ type: "SET_LOADING", payload: false })
    }
  }

  return {
    questions: state.questions,
    loading: state.loading,
    error: state.error,
    loadQuestions,
    askQuestion,
  }
}
